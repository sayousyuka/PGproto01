package com.example.pgproto01.viewmodel

import android.app.Application
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.pgproto01.data.model.AppDatabase
import com.example.pgproto01.data.model.PunchLog
import com.example.pgproto01.data.model.PunchType
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.LocalDateTime
import com.example.pgproto01.data.model.DailyComment
import java.time.format.DateTimeFormatter // ‚Üê „Åì„Çå„ÇíËøΩÂä†
import com.example.pgproto01.data.model.toRequest
import com.example.pgproto01.data.remote.ApiClient

import android.util.Log

class PunchLogViewModel(application: Application) : AndroidViewModel(application) {
    private val db = AppDatabase.getDatabase(application)
    private val punchLogDao = db.punchLogDao()
    private val dailyCommentDao = db.dailyCommentDao()

    private val _missingPunches = mutableStateOf<List<PunchType>>(emptyList())
    val missingPunches: List<PunchType> get() = _missingPunches.value

    // ‚úÖ „ÉÄ„Ç§„Ç¢„É≠„Ç∞Âà∂Âæ°Áî®„Çπ„ÉÜ„Éº„Éà
    var isManualDialogVisible by mutableStateOf(false)
        private set

    var manualDialogDate by mutableStateOf<LocalDate?>(null)
        private set

    var manualDialogType by mutableStateOf<PunchType?>(null)
        private set

    // ‚úÖ ÊâìÂàª„Éú„Çø„É≥„ÅÆ pendingType „ÇíÁÆ°ÁêÜ
    var pendingType by mutableStateOf<PunchType?>(null)
        private set

    fun updatePendingType(type: PunchType?) {
        pendingType = type
    }

    // ‚úÖ ÊâãÂãï„ÉÄ„Ç§„Ç¢„É≠„Ç∞Âà∂Âæ°
    fun openManualDialog(date: LocalDate, type: PunchType) {
        manualDialogDate = date
        manualDialogType = type
        isManualDialogVisible = true
    }

    fun closeManualDialog() {
        isManualDialogVisible = false
        manualDialogDate = null
        manualDialogType = null
    }

    // ‚úÖ ÊâãÂãïÊâìÂàª„ÅÆ‰øùÂ≠ò
    fun insertManualPunch(staffId: Long, dateTime: LocalDateTime, type: PunchType, comment: String) {
        viewModelScope.launch(Dispatchers.IO) {
            val log = PunchLog(
                staffId = staffId,
                timestamp = dateTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli(),
                type = type.name,
                isManual = true,
                comment = comment
            )
            punchLogDao.insert(log)
        }
    }

    // ‚úÖ DBÂü∫Êú¨Êìç‰Ωú
    fun insert(log: PunchLog) {
        android.util.Log.i("PunchLogViewModel", "üì• insertÂëº„Å∞„Çå„Åü: $log")
        viewModelScope.launch(Dispatchers.IO) {
            punchLogDao.insert(log)
            val all = punchLogDao.getAll()
            android.util.Log.d("PunchLogViewModel", "ÁèæÂú®„ÅÆDBÂÜÖÂÆπ: $all")
        }
    }

    fun delete(log: PunchLog) {
        viewModelScope.launch(Dispatchers.IO) {
            punchLogDao.delete(log)
        }
    }

    fun clearAll() {
        viewModelScope.launch(Dispatchers.IO) {
            punchLogDao.clearAll()
        }
    }

    fun getPunchLogsForStaff(staffId: Long): Flow<List<PunchLog>> {
        return punchLogDao.getByStaffId(staffId)
    }
    // Flow „Çí State „Å´Â§âÊèõ„Åó„Å¶ UI „ÅßÁõ£Ë¶ñ
    fun getCommentForDay(staffId: Long, date: LocalDate): Flow<DailyComment?> {
        return dailyCommentDao.getCommentForDay(staffId.toString(), date.toString())
    }

    fun setComment(staffId: Long, date: LocalDate, text: String) {
        viewModelScope.launch(Dispatchers.IO) {
            dailyCommentDao.insert(
                DailyComment(staffId.toString(), date.toString(), text)
            )
        }
    }
    fun updateMissingPunches(missing: List<PunchType>) {
        _missingPunches.value = missing
    }

    private val _showManualDialog = mutableStateOf(false)
    val showManualDialog: Boolean get() = _showManualDialog.value

    fun updateShowManualDialog(show: Boolean) {
        _showManualDialog.value = show
    }
    fun insertPunchLog(
        staffId: Long,
        type: PunchType,
        timestamp: LocalDateTime,
        isManual: Boolean = false
    ) {
        val log = PunchLog(
            staffId = staffId,
            timestamp = timestamp.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli(),
            type = type.name,
            isManual = isManual,
            isDeleted = false,
            comment = null,
            createdAt = System.currentTimeMillis()
        )

        viewModelScope.launch(Dispatchers.IO) {
            punchLogDao.insert(log)

            // ‚úÖ LambdaÈÄÅ‰ø°„ÇÇËøΩÂä†
            val request = log.toRequest()
            val success = ApiClient.postAttendanceLog(
                apiUrl = "https://mcd3aliox3.execute-api.ap-southeast-2.amazonaws.com/attendance",
                log = request
            )

            if (success) {
                Log.i("PunchLogViewModel", "‚úÖ Âã§ÊÄ†„É≠„Ç∞ÈÄÅ‰ø°ÊàêÂäü")
            } else {
                Log.e("PunchLogViewModel", "‚ùå Âã§ÊÄ†„É≠„Ç∞ÈÄÅ‰ø°Â§±Êïó")
            }

        }
    }

    fun getMissingPunchesForType(
        logs: List<PunchLog>,
        type: PunchType
    ): List<PunchType> {
        val typesToday = logs.map { it.type }.toSet()

        return when (type) {
            PunchType.IN -> emptyList()  // Âá∫Âã§„Å™„ÇâË£úÂÆå‰∏çË¶Å
            PunchType.BREAK_OUT -> if (!typesToday.contains(PunchType.IN.name)) listOf(PunchType.IN) else emptyList()
            PunchType.BREAK_IN -> {
                val missing = mutableListOf<PunchType>()
                if (!typesToday.contains(PunchType.IN.name)) missing.add(PunchType.IN)
                if (!typesToday.contains(PunchType.BREAK_OUT.name)) missing.add(PunchType.BREAK_OUT)
                missing
            }
            PunchType.OUT -> {
                val missing = mutableListOf<PunchType>()
                if (!typesToday.contains(PunchType.IN.name)) missing.add(PunchType.IN)
                if (typesToday.contains(PunchType.BREAK_OUT.name) && !typesToday.contains(PunchType.BREAK_IN.name)) {
                    missing.add(PunchType.BREAK_IN)
                }
                missing
            }
        }
    }

}
